import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { CountryService } from '../../utils/services/country/country.service';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CountrySelectorComponent implements ControlValueAccessor, OnChanges, OnDestroy {
    private _countryService;
    private cdr;
    highlight: string;
    selected: string;
    disabled: boolean;
    autocomplete: boolean;
    hint: string;
    idField: string;
    label: string;
    placeholder: string;
    size: 'sm' | 'md';
    selectionChange: EventEmitter<string>;
    queryFunc: (txt: string) => Promise<any[]>;
    optionTextFn: (country: string) => string;
    control: FormControl;
    countriesList: string[];
    countryToBeHighlighted: string;
    onChangeSub: Subscription;
    onChange: any;
    onTouch: any;
    constructor(_countryService: CountryService, cdr: ChangeDetectorRef);
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(onTouched: Function): void;
    setDisabledState(isDisabled: boolean): void;
    private updateDisableState;
    getCountryCode(country: string): string | undefined;
    _selectionChange(country: string): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CountrySelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CountrySelectorComponent, "esn-country-selector", never, { "highlight": "highlight"; "selected": "selected"; "disabled": "disabled"; "autocomplete": "autocomplete"; "hint": "hint"; "idField": "idField"; "label": "label"; "placeholder": "placeholder"; "size": "size"; }, { "selectionChange": "selectionChange"; }, never, never, false, never>;
}
