import { BehaviorSubject, from, throwError } from 'rxjs';
import { catchError, debounceTime, switchMap, tap } from 'rxjs/operators';
import { ESN_ASYNC_DATASOURCE_DEFAULT_ADAPTER, EsnAsyncDataSourceType, } from './esnAsyncTableAdapter';
export class EsnAsyncDataSource {
    constructor(funcToCall, adapter) {
        this.funcToCall = funcToCall;
        this.elementsSubject = new BehaviorSubject([]);
        this.loadingSubject = new BehaviorSubject(false);
        this.nbOfResultsSubject = new BehaviorSubject(0);
        this.errorDisplaySubject = new BehaviorSubject(null);
        this.loading$ = this.loadingSubject.asObservable();
        this.numberOfResults$ = this.nbOfResultsSubject.asObservable();
        this.errorDisplay$ = this.errorDisplaySubject.asObservable();
        this.load$ = new BehaviorSubject([]);
        this._adapter = adapter || new ESN_ASYNC_DATASOURCE_DEFAULT_ADAPTER();
        this.load$
            .pipe(tap(() => this.loadingSubject.next(true)), debounceTime(this._adapter.debounceTime), tap(() => this.loadingSubject.next(true)), switchMap((args) => this._adapter.callReturnType === EsnAsyncDataSourceType.PROMISE
            ? from(this.funcToCall(...args))
            : this.funcToCall(...args)), catchError((err) => {
            this.loadingSubject.next(false);
            this.errorDisplaySubject.next(this._adapter.processError(err));
            return throwError(err);
        }))
            .subscribe((resp) => {
            this.loadingSubject.next(false);
            this.elementsSubject.next(this._adapter.getResults(resp));
            this.nbOfResultsSubject.next(this._adapter.getTotalNbResults(resp));
            this.errorDisplaySubject.next(this._adapter.getError(resp));
        });
    }
    connect(collectionViewer) {
        return this.elementsSubject.asObservable();
    }
    disconnect(collectionViewer) {
        this.elementsSubject.complete();
        this.loadingSubject.complete();
        this.nbOfResultsSubject.complete();
        this.errorDisplaySubject.complete();
    }
    load(...args) {
        this.load$.next(args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNuLWFzeW5jLWRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcm9tLWRvbWFpbi1pcG5uLWM5MC1kZXNpZ24tbGliL3NyYy9saWIvY29tcG9uZW50cy90YWJsZS9hc3luYy10YWJsZS9lc24tYXN5bmMtZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBa0IsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFPLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRSxPQUFPLEVBQ0wsb0NBQW9DLEVBR3BDLHNCQUFzQixHQUN2QixNQUFNLHdCQUF3QixDQUFDO0FBRWhDLE1BQU0sT0FBTyxrQkFBa0I7SUFjN0IsWUFDUyxVQUFvQixFQUMzQixPQUFtQztRQUQ1QixlQUFVLEdBQVYsVUFBVSxDQUFVO1FBZHJCLG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQU0sRUFBRSxDQUFDLENBQUM7UUFDL0MsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUNyRCx1QkFBa0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUNwRCx3QkFBbUIsR0FBRyxJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztRQUV0RCxhQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM5QyxxQkFBZ0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUQsa0JBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7UUFJeEQsVUFBSyxHQUFHLElBQUksZUFBZSxDQUFRLEVBQUUsQ0FBQyxDQUFDO1FBTTVDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxJQUFJLElBQUksb0NBQW9DLEVBQUUsQ0FBQztRQUN0RSxJQUFJLENBQUMsS0FBSzthQUNQLElBQUksQ0FDSCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDekMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQ3hDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUN6QyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsS0FBSyxzQkFBc0IsQ0FBQyxPQUFPO1lBQzdELENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQzdCLEVBQ0QsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9ELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNIO2FBQ0EsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsT0FBTyxDQUFDLGdCQUFrQztRQUN4QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELFVBQVUsQ0FBQyxnQkFBa0M7UUFDM0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFHLElBQVc7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sbGVjdGlvblZpZXdlciwgRGF0YVNvdXJjZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2xsZWN0aW9ucyc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgZnJvbSwgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZGVib3VuY2VUaW1lLCBtYXAsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge1xyXG4gIEVTTl9BU1lOQ19EQVRBU09VUkNFX0RFRkFVTFRfQURBUFRFUixcclxuICBFc25Bc3luY0RhdGFTb3VyY2VBZGFwdGVyLFxyXG4gIEVzbkFzeW5jRGF0YXNvdXJjZUNhbGxXcmFwcGVyQWRhcHRlcixcclxuICBFc25Bc3luY0RhdGFTb3VyY2VUeXBlLFxyXG59IGZyb20gJy4vZXNuQXN5bmNUYWJsZUFkYXB0ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVzbkFzeW5jRGF0YVNvdXJjZTxUPiBpbXBsZW1lbnRzIERhdGFTb3VyY2U8VD4ge1xyXG4gIHByaXZhdGUgZWxlbWVudHNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxUW10+KFtdKTtcclxuICBwcml2YXRlIGxvYWRpbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XHJcbiAgcHJpdmF0ZSBuYk9mUmVzdWx0c1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oMCk7XHJcbiAgcHJpdmF0ZSBlcnJvckRpc3BsYXlTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KG51bGwpO1xyXG5cclxuICBwdWJsaWMgbG9hZGluZyQgPSB0aGlzLmxvYWRpbmdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIHB1YmxpYyBudW1iZXJPZlJlc3VsdHMkID0gdGhpcy5uYk9mUmVzdWx0c1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgcHVibGljIGVycm9yRGlzcGxheSQgPSB0aGlzLmVycm9yRGlzcGxheVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gIF9hZGFwdGVyOiBFc25Bc3luY0RhdGFTb3VyY2VBZGFwdGVyO1xyXG5cclxuICBwdWJsaWMgbG9hZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueVtdPihbXSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIGZ1bmNUb0NhbGw6IEZ1bmN0aW9uLFxyXG4gICAgYWRhcHRlcj86IEVzbkFzeW5jRGF0YVNvdXJjZUFkYXB0ZXIsXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9hZGFwdGVyID0gYWRhcHRlciB8fCBuZXcgRVNOX0FTWU5DX0RBVEFTT1VSQ0VfREVGQVVMVF9BREFQVEVSKCk7XHJcbiAgICB0aGlzLmxvYWQkXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmxvYWRpbmdTdWJqZWN0Lm5leHQodHJ1ZSkpLFxyXG4gICAgICAgIGRlYm91bmNlVGltZSh0aGlzLl9hZGFwdGVyLmRlYm91bmNlVGltZSksXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMubG9hZGluZ1N1YmplY3QubmV4dCh0cnVlKSksXHJcbiAgICAgICAgc3dpdGNoTWFwKChhcmdzKSA9PlxyXG4gICAgICAgICAgdGhpcy5fYWRhcHRlci5jYWxsUmV0dXJuVHlwZSA9PT0gRXNuQXN5bmNEYXRhU291cmNlVHlwZS5QUk9NSVNFXHJcbiAgICAgICAgICAgID8gZnJvbSh0aGlzLmZ1bmNUb0NhbGwoLi4uYXJncykpXHJcbiAgICAgICAgICAgIDogdGhpcy5mdW5jVG9DYWxsKC4uLmFyZ3MpXHJcbiAgICAgICAgKSxcclxuICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1N1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICB0aGlzLmVycm9yRGlzcGxheVN1YmplY3QubmV4dCh0aGlzLl9hZGFwdGVyLnByb2Nlc3NFcnJvcihlcnIpKTtcclxuICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycik7XHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgICAuc3Vic2NyaWJlKChyZXNwKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU3ViamVjdC5uZXh0KGZhbHNlKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzU3ViamVjdC5uZXh0KHRoaXMuX2FkYXB0ZXIuZ2V0UmVzdWx0cyhyZXNwKSk7XHJcbiAgICAgICAgdGhpcy5uYk9mUmVzdWx0c1N1YmplY3QubmV4dCh0aGlzLl9hZGFwdGVyLmdldFRvdGFsTmJSZXN1bHRzKHJlc3ApKTtcclxuICAgICAgICB0aGlzLmVycm9yRGlzcGxheVN1YmplY3QubmV4dCh0aGlzLl9hZGFwdGVyLmdldEVycm9yKHJlc3ApKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25uZWN0KGNvbGxlY3Rpb25WaWV3ZXI6IENvbGxlY3Rpb25WaWV3ZXIpOiBPYnNlcnZhYmxlPHJlYWRvbmx5IFRbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgZGlzY29ubmVjdChjb2xsZWN0aW9uVmlld2VyOiBDb2xsZWN0aW9uVmlld2VyKTogdm9pZCB7XHJcbiAgICB0aGlzLmVsZW1lbnRzU3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgdGhpcy5sb2FkaW5nU3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgdGhpcy5uYk9mUmVzdWx0c1N1YmplY3QuY29tcGxldGUoKTtcclxuICAgIHRoaXMuZXJyb3JEaXNwbGF5U3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gIH1cclxuXHJcbiAgbG9hZCguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgdGhpcy5sb2FkJC5uZXh0KGFyZ3MpO1xyXG4gIH1cclxufVxyXG4iXX0=