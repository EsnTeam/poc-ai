import { NgxMatNativeDateAdapter } from '@angular-material-components/datetime-picker';
const INTL_DATE_INPUT_FORMAT = {
    year: 'numeric',
    month: 'numeric',
    day: 'numeric',
    hourCycle: 'h23',
    hour: '2-digit',
    minute: '2-digit',
};
export const CUSTOM_DATE_FORMATS = {
    parse: {
        dateInput: INTL_DATE_INPUT_FORMAT,
    },
    display: {
        dateInput: INTL_DATE_INPUT_FORMAT,
        monthYearLabel: { year: 'numeric', month: 'short' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' },
    },
};
function invertDayAndMonth(str) {
    // Regular expression to match dates in the format mm/dd/yyyy
    const dateRegex = /(\b\d{1,2})\/(\d{1,2})\/(\d{4}\b)/g;
    return str.replace(dateRegex, function (match, month, day, year) {
        return day + '/' + month + '/' + year;
    });
}
export class CustomDateAdapter extends NgxMatNativeDateAdapter {
    getFirstDayOfWeek() {
        // Monday is the first day of the week
        return 1;
    }
    parse(value) {
        // parse dd/MM/yyyy instead of MM/dd/yyyy
        let toParse = value;
        if (typeof value === 'string') {
            toParse = invertDayAndMonth(value);
        }
        return new Date(toParse);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tRGF0ZUZvcm1hdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcm9tLWRvbWFpbi1pcG5uLWM5MC1kZXNpZ24tbGliL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC9kYXRlcGlja2VyL2N1c3RvbURhdGVGb3JtYXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXZGLE1BQU0sc0JBQXNCLEdBQUc7SUFDN0IsSUFBSSxFQUFFLFNBQVM7SUFDZixLQUFLLEVBQUUsU0FBUztJQUNoQixHQUFHLEVBQUUsU0FBUztJQUNkLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLElBQUksRUFBRSxTQUFTO0lBQ2YsTUFBTSxFQUFFLFNBQVM7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFzQjtJQUNwRCxLQUFLLEVBQUU7UUFDTCxTQUFTLEVBQUUsc0JBQXNCO0tBQ2xDO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsU0FBUyxFQUFFLHNCQUFzQjtRQUNqQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDbkQsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUU7UUFDakUsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7S0FDdkQ7Q0FDRixDQUFDO0FBRUYsU0FBUyxpQkFBaUIsQ0FBQyxHQUFXO0lBQ3BDLDZEQUE2RDtJQUM3RCxNQUFNLFNBQVMsR0FBRyxvQ0FBb0MsQ0FBQztJQUV2RCxPQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUMzRCxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxPQUFPLGlCQUFrQixTQUFRLHVCQUF1QjtJQUNuRCxpQkFBaUI7UUFDeEIsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVRLEtBQUssQ0FBQyxLQUFVO1FBQ3ZCLHlDQUF5QztRQUN6QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBRyxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUM7WUFDM0IsT0FBTyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ25DO1FBQ0QsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ3hNYXREYXRlRm9ybWF0cyB9IGZyb20gJ0Bhbmd1bGFyLW1hdGVyaWFsLWNvbXBvbmVudHMvZGF0ZXRpbWUtcGlja2VyJztcclxuaW1wb3J0IHsgTmd4TWF0TmF0aXZlRGF0ZUFkYXB0ZXIgfSBmcm9tICdAYW5ndWxhci1tYXRlcmlhbC1jb21wb25lbnRzL2RhdGV0aW1lLXBpY2tlcic7XHJcblxyXG5jb25zdCBJTlRMX0RBVEVfSU5QVVRfRk9STUFUID0ge1xyXG4gIHllYXI6ICdudW1lcmljJyxcclxuICBtb250aDogJ251bWVyaWMnLFxyXG4gIGRheTogJ251bWVyaWMnLFxyXG4gIGhvdXJDeWNsZTogJ2gyMycsXHJcbiAgaG91cjogJzItZGlnaXQnLFxyXG4gIG1pbnV0ZTogJzItZGlnaXQnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IENVU1RPTV9EQVRFX0ZPUk1BVFM6IE5neE1hdERhdGVGb3JtYXRzID0ge1xyXG4gIHBhcnNlOiB7XHJcbiAgICBkYXRlSW5wdXQ6IElOVExfREFURV9JTlBVVF9GT1JNQVQsXHJcbiAgfSxcclxuICBkaXNwbGF5OiB7XHJcbiAgICBkYXRlSW5wdXQ6IElOVExfREFURV9JTlBVVF9GT1JNQVQsXHJcbiAgICBtb250aFllYXJMYWJlbDogeyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnIH0sXHJcbiAgICBkYXRlQTExeUxhYmVsOiB7IHllYXI6ICdudW1lcmljJywgbW9udGg6ICdsb25nJywgZGF5OiAnbnVtZXJpYycgfSxcclxuICAgIG1vbnRoWWVhckExMXlMYWJlbDogeyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycgfSxcclxuICB9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gaW52ZXJ0RGF5QW5kTW9udGgoc3RyOiBzdHJpbmcpIHtcclxuICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggZGF0ZXMgaW4gdGhlIGZvcm1hdCBtbS9kZC95eXl5XHJcbiAgY29uc3QgZGF0ZVJlZ2V4ID0gLyhcXGJcXGR7MSwyfSlcXC8oXFxkezEsMn0pXFwvKFxcZHs0fVxcYikvZztcclxuXHJcbiAgcmV0dXJuICBzdHIucmVwbGFjZShkYXRlUmVnZXgsIGZ1bmN0aW9uKG1hdGNoLCBtb250aCwgZGF5LCB5ZWFyKSB7XHJcbiAgICAgIHJldHVybiBkYXkgKyAnLycgKyBtb250aCArICcvJyArIHllYXI7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21EYXRlQWRhcHRlciBleHRlbmRzIE5neE1hdE5hdGl2ZURhdGVBZGFwdGVyIHtcclxuICBvdmVycmlkZSBnZXRGaXJzdERheU9mV2VlaygpOiBudW1iZXIge1xyXG4gICAgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgcGFyc2UodmFsdWU6IGFueSl7XHJcbiAgICAvLyBwYXJzZSBkZC9NTS95eXl5IGluc3RlYWQgb2YgTU0vZGQveXl5eVxyXG4gICAgbGV0IHRvUGFyc2UgPSB2YWx1ZTtcclxuICAgIGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpe1xyXG4gICAgICB0b1BhcnNlID0gaW52ZXJ0RGF5QW5kTW9udGgodmFsdWUpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IERhdGUodG9QYXJzZSk7XHJcbiAgfVxyXG59Il19