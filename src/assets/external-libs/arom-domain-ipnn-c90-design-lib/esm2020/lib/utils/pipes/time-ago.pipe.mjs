import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TimeAgoPipe {
    transform(inputDate) {
        if (!inputDate) {
            return '';
        }
        const date = new Date(inputDate);
        const diff = Date.now() - date.getTime();
        const minute = 60 * 1000;
        if (diff < minute) {
            return `Il y a moins d'une minute`;
        }
        const heure = 60 * minute;
        if (diff < heure - 0.5 * minute) {
            const nb = Math.round(diff / minute);
            return `Il y a ${nb} minute${nb > 1 ? 's' : ''}`;
        }
        const jour = 24 * heure;
        if (diff < jour - 0.5 * heure) {
            const nb = Math.round(diff / heure);
            return `Il y a ${nb} heure${nb > 1 ? 's' : ''}`;
        }
        const mois = 30 * jour;
        if (diff < mois - 0.5 * jour) {
            const nb = Math.round(diff / jour);
            return `Il y a ${nb} jour${nb > 1 ? 's' : ''}`;
        }
        const an = 365 * jour;
        if (diff < an - 0.5 * mois) {
            const nb = Math.round(diff / mois);
            return `Il y a ${nb} mois`;
        }
        const nb = Math.round(diff / an);
        return `Il y a ${nb} an${nb > 1 ? 's' : ''}`;
    }
}
TimeAgoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TimeAgoPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TimeAgoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: TimeAgoPipe, name: "timeAgo" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TimeAgoPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'timeAgo' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Fyb20tZG9tYWluLWlwbm4tYzkwLWRlc2lnbi1saWIvc3JjL2xpYi91dGlscy9waXBlcy90aW1lLWFnby5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQUdwRCxNQUFNLE9BQU8sV0FBVztJQUN0QixTQUFTLENBQUMsU0FBMkM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXpDLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxJQUFJLEdBQUcsTUFBTSxFQUFFO1lBQ2pCLE9BQU8sMkJBQTJCLENBQUM7U0FDcEM7UUFDRCxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQzFCLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sVUFBVSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNsRDtRQUNELE1BQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLEVBQUU7WUFDN0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDcEMsT0FBTyxVQUFVLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ2pEO1FBQ0QsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRTtZQUM1QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNuQyxPQUFPLFVBQVUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDaEQ7UUFDRCxNQUFNLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQzFCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ25DLE9BQU8sVUFBVSxFQUFFLE9BQU8sQ0FBQztTQUM1QjtRQUNELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMvQyxDQUFDOzt5R0FsQ1UsV0FBVzt1R0FBWCxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAndGltZUFnbycgfSlcclxuZXhwb3J0IGNsYXNzIFRpbWVBZ29QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0RGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xyXG4gICAgaWYgKCFpbnB1dERhdGUpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGlucHV0RGF0ZSk7XHJcbiAgICBjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIGRhdGUuZ2V0VGltZSgpO1xyXG5cclxuICAgIGNvbnN0IG1pbnV0ZSA9IDYwICogMTAwMDtcclxuICAgIGlmIChkaWZmIDwgbWludXRlKSB7XHJcbiAgICAgIHJldHVybiBgSWwgeSBhIG1vaW5zIGQndW5lIG1pbnV0ZWA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoZXVyZSA9IDYwICogbWludXRlO1xyXG4gICAgaWYgKGRpZmYgPCBoZXVyZSAtIDAuNSAqIG1pbnV0ZSkge1xyXG4gICAgICBjb25zdCBuYiA9IE1hdGgucm91bmQoZGlmZiAvIG1pbnV0ZSk7XHJcbiAgICAgIHJldHVybiBgSWwgeSBhICR7bmJ9IG1pbnV0ZSR7bmIgPiAxID8gJ3MnIDogJyd9YDtcclxuICAgIH1cclxuICAgIGNvbnN0IGpvdXIgPSAyNCAqIGhldXJlO1xyXG4gICAgaWYgKGRpZmYgPCBqb3VyIC0gMC41ICogaGV1cmUpIHtcclxuICAgICAgY29uc3QgbmIgPSBNYXRoLnJvdW5kKGRpZmYgLyBoZXVyZSk7XHJcbiAgICAgIHJldHVybiBgSWwgeSBhICR7bmJ9IGhldXJlJHtuYiA+IDEgPyAncycgOiAnJ31gO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbW9pcyA9IDMwICogam91cjtcclxuICAgIGlmIChkaWZmIDwgbW9pcyAtIDAuNSAqIGpvdXIpIHtcclxuICAgICAgY29uc3QgbmIgPSBNYXRoLnJvdW5kKGRpZmYgLyBqb3VyKTtcclxuICAgICAgcmV0dXJuIGBJbCB5IGEgJHtuYn0gam91ciR7bmIgPiAxID8gJ3MnIDogJyd9YDtcclxuICAgIH1cclxuICAgIGNvbnN0IGFuID0gMzY1ICogam91cjtcclxuICAgIGlmIChkaWZmIDwgYW4gLSAwLjUgKiBtb2lzKSB7XHJcbiAgICAgIGNvbnN0IG5iID0gTWF0aC5yb3VuZChkaWZmIC8gbW9pcyk7XHJcbiAgICAgIHJldHVybiBgSWwgeSBhICR7bmJ9IG1vaXNgO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmIgPSBNYXRoLnJvdW5kKGRpZmYgLyBhbik7XHJcbiAgICByZXR1cm4gYElsIHkgYSAke25ifSBhbiR7bmIgPiAxID8gJ3MnIDogJyd9YDtcclxuICB9XHJcbn1cclxuIl19