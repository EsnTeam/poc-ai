import { saveAs } from 'file-saver';
export class EsnFileConverter {
    static async cutBlobIntoChunks(item, fileChunkMaxSize) {
        const chunks = [];
        const blob = await EsnFileConverter.base64ToBlob(item.blobString);
        for (let start = 0, index = 0; start < blob.size; start += fileChunkMaxSize, index++) {
            const chunk = blob.slice(start, start + fileChunkMaxSize);
            chunks.push(chunk);
        }
        if (!chunks.length) {
            chunks.push(blob);
        }
        return chunks;
    }
    // To compute the checksum
    static getFileBuffer(file) {
        return new Promise((resolve, reject) => {
            const fr = new FileReader();
            fr.onload = () => {
                resolve(fr.result);
            };
            fr.onerror = (error) => {
                reject(error);
            };
            fr.readAsArrayBuffer(file);
        });
    }
    // To display the image
    static getFileBase64(file) {
        return new Promise((resolve, reject) => {
            const fr = new FileReader();
            fr.onload = () => {
                resolve(fr.result);
            };
            fr.onerror = (error) => {
                reject(error);
            };
            fr.readAsDataURL(file);
        });
    }
    // To display a thumbnail
    static getImgFromBlob(file, maxWidth = 100, maxHeight = 100) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target?.result;
                img.onload = function (e2) {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    ctx?.drawImage(img, 0, 0);
                    canvas.width = img.width;
                    canvas.height = img.height;
                    // calculate the new width / height respecting the original ratio
                    if (img.width > img.height) {
                        if (img.width > maxWidth) {
                            canvas.height *= maxWidth / img.width;
                            canvas.width = maxWidth;
                        }
                    }
                    else {
                        if (img.height > maxHeight) {
                            canvas.width *= maxHeight / img.height;
                            canvas.height = maxHeight;
                        }
                    }
                    // resize
                    const ctx2 = canvas.getContext('2d');
                    ctx2?.drawImage(img, 0, 0, canvas.width, canvas.height);
                    // TODO : convert to webp
                    // canvas.toBlob( blob => {
                    //   resolve(URL.createObjectURL(blob))
                    // }, 'image/webp')
                    const dataUrl = canvas.toDataURL(file.type);
                    resolve({ dataUrl, width: canvas.width, height: canvas.height });
                };
                img.onerror = (error) => {
                    reject(error);
                };
            };
            reader.onerror = (error) => {
                reject(error);
            };
            reader.readAsDataURL(file);
        });
    }
    static getImgDimensions(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target?.result;
                img.onload = function (e2) {
                    resolve({
                        width: img.width,
                        height: img.height,
                    });
                };
                img.onerror = (error) => {
                    reject(error);
                };
            };
            reader.onerror = (error) => {
                reject(error);
            };
            reader.readAsDataURL(file);
        });
    }
    static roundValue(value) {
        return value ? Math.ceil(value) : 0;
    }
    /*******************/
    /* DATA CONVERSION
    /*******************/
    static bufferToBase64(buffer) {
        const data = buffer.reduce((acc, i) => (acc += String.fromCharCode.apply(null, [i])), '');
        return btoa(data);
    }
    static base64ToBuffer(b64) {
        return Uint8Array.from(atob(b64), (c) => c.charCodeAt(null));
    }
    static blobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onerror = reject;
            reader.onload = () => {
                resolve(reader.result);
            };
            reader.readAsDataURL(blob);
        });
    }
    static async base64ToBlob(b64) {
        console.log({ b64 });
        if (b64 === 'data:') {
            return new Blob([]);
        }
        return this.buildBlob(b64);
    }
    static async buildBlob(dataURL) {
        const BASE64_MARKER = ';base64,';
        const parts = dataURL.split(BASE64_MARKER);
        const contentType = parts[0].split(':')[1];
        const raw = window.atob(parts[1]);
        const rawLength = raw.length;
        const uInt8Array = new Uint8Array(rawLength);
        for (let i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
        }
        return new Blob([uInt8Array], { type: contentType });
    }
    static async getImageFromBlobItem(item, maxWidth = 320, maxHeight = 256) {
        const blob = await EsnFileConverter.base64ToBlob(item.blobString);
        const file = EsnFileConverter.blobToFile(blob, item.filename);
        const image = await EsnFileConverter.getImgFromBlob(file, maxWidth, maxHeight);
        return image;
    }
    static async getThumbnailUrlFromBlob(item) {
        return (await EsnFileConverter.getImageFromBlobItem(item)).dataUrl;
    }
    static async customMetadataDtoToBlobItem(customMetadata) {
        const blobString = await EsnFileConverter.blobToBase64(customMetadata.blob);
        return {
            filename: customMetadata.filename,
            uuid: customMetadata.externalUuid,
            size: customMetadata.size,
            contentType: document.contentType,
            blobString: blobString,
        };
    }
    static async customMetadataDtosToBlobItems(customMetadata) {
        const promises = [];
        customMetadata.forEach((doc) => promises.push(EsnFileConverter.customMetadataDtoToBlobItem(doc)));
        return Promise.all(promises);
    }
    static saveFile(blob, fileName, fileType) {
        const file = new Blob([blob], { type: fileType });
        saveAs(file, fileName); // TODO pour plus tard: Ã  changer par https://blog.excalidraw.com/browser-fs-access/
    }
    static convertFileMetaDataToDocument(file, loading = false, actions = {
        delete: false,
        download: true,
        view: false,
        upload: false,
    }) {
        return {
            metadata: file,
            loading,
            actions,
        };
    }
}
EsnFileConverter.blobToFile = (theBlob, fileName) => {
    var b = theBlob;
    b.lastModifiedDate = new Date();
    b.name = fileName;
    return theBlob;
};
//# sourceMappingURL=data:application/json;base64,