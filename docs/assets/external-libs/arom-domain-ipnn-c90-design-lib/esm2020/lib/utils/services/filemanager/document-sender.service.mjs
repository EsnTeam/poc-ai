import { Inject, Injectable } from '@angular/core';
import { EsnApiUtils, EsnFileConverter, EsnUtils } from '../../public-api';
import { ArrayBuffer } from 'spark-md5';
import { ESN_FILE_CHUNK_MAX_SIZE, FILE_MANAGER_PROVIDER } from './filemanager-configuration';
import { lastValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./blob-retreiver";
import * as i2 from "./filemanagerController.service";
import * as i3 from "./upload-state.service";
export class EsnDocumentSenderService {
    constructor(PROVIDER, FILE_CHUNK_MAX_SIZE, filesService, fmService, 
    // public eventService: EventService,
    uploadStateService) {
        this.PROVIDER = PROVIDER;
        this.FILE_CHUNK_MAX_SIZE = FILE_CHUNK_MAX_SIZE;
        this.filesService = filesService;
        this.fmService = fmService;
        this.uploadStateService = uploadStateService;
        this.uploadItems = [];
    }
    async uploadDocumentsToFM(documents, blobs, showUploadToaster = false) {
        console.log(documents);
        const nbChunksToSend = documents.reduce((acc, curr) => acc + Math.ceil(curr.size / this.FILE_CHUNK_MAX_SIZE), 0);
        const uploadId = EsnUtils.generateRandomUuid();
        this.uploadItems.push({
            uploadId,
            nbChunksTotal: nbChunksToSend,
            nbChunksRemaining: nbChunksToSend,
        });
        this.uploadStateService.uploadStarts(showUploadToaster);
        try {
            this.uploadStateService.updateUploadProgress(this.uploadItems);
            for (const doc of documents) {
                console.log(doc);
                if (!doc.uuid) {
                    let blob = null;
                    if (!!blobs) {
                        blob = blobs.find((blob) => blob.uuid === doc.externalUuid);
                    }
                    await this.uploadDocumentToFM(doc, blob, uploadId);
                }
            }
            this.uploadItems = this.uploadItems.filter((u) => u.uploadId !== uploadId);
            this.uploadStateService.updateUploadProgress(this.uploadItems);
        }
        catch (err) {
            this.uploadStateService.uploadEnds(showUploadToaster);
            throw err;
        }
        this.uploadStateService.uploadEnds(showUploadToaster);
    }
    async uploadDocumentToFM(doc, blob, uploadId, showUploadToaster = false) {
        this.uploadStateService.uploadStarts(showUploadToaster);
        if (!!doc.uuid) {
            return;
        }
        try {
            console.log('getting blobChunks');
            let chunksToSend;
            console.log('here', blob);
            if (!!blob) {
                chunksToSend = await EsnFileConverter.cutBlobIntoChunks(blob, this.FILE_CHUNK_MAX_SIZE);
            }
            else {
                chunksToSend = await this.getBlobChunks(doc.externalUuid);
            }
            console.log(chunksToSend);
            const respInitCall = await this.makeInitialUploadRequestCall(doc);
            const receivedFileMetadata = respInitCall.content.fileMetadata;
            console.log('receivedFileMetadata');
            console.log(receivedFileMetadata);
            await this.sendChunks(chunksToSend, receivedFileMetadata, uploadId);
            const respCompleteCall = await this.sendCompletion(receivedFileMetadata);
            const updatedFileMetadata = respCompleteCall.content.fileMetadata;
            console.log('updatedFileMetadata');
            console.log(updatedFileMetadata);
            Object.assign(doc, updatedFileMetadata);
            // this.eventService.createEvent(GddWebappEventType.UPLOAD_FILE_SUCCESS, {
            //   externalUuid: doc.externalUuid,
            //   filename: doc.filename,
            // });
        }
        catch (error) {
            // this.eventService.createEvent(
            //   GddWebappEventType.UPLOAD_FILE_FAIL,
            //   {
            //     externalUuid: doc.externalUuid,
            //     filename: doc.filename,
            //     messagePrecision: error.message,
            //     bodySent: JSON.stringify(error.bodySent, null, 2),
            //   },
            //   ApiUtils.handleOffLineAndUnauthenticatedEventOptions(error.error)
            // );
            this.uploadStateService.uploadEnds(showUploadToaster);
            throw error;
        }
        this.uploadStateService.uploadEnds(showUploadToaster);
    }
    async makeInitialUploadRequestCall(doc) {
        const requestBody = {
            contentType: doc.contentType,
            filename: doc.filename,
            size: doc.size,
            description: doc.description,
            //checksum: doc.checksum!,
            externalUuid: doc.externalUuid,
            fileProvider: this.PROVIDER,
        };
        return await EsnApiUtils.retry(() => this.fmService.filesInitFile(requestBody).toPromise(), (resp) => !!resp.content?.fileMetadata, 'initial request call', requestBody);
    }
    async sendChunks(chunks, fm, uploadId) {
        const sparkMd5 = new ArrayBuffer();
        console.log('sending chunks');
        for (let i = 0; i < chunks.length; i++) {
            console.log(await this.sendChunk(chunks[i], fm, i, sparkMd5));
            this.chunkUploadComplete(uploadId || '');
        }
        fm.checksum = sparkMd5.end();
    }
    async sendChunk(chunk, fm, index, sparkMd5) {
        const formData = new FormData();
        formData.append('file', chunk, fm.filename);
        const blobBuffer = await EsnFileConverter.getFileBuffer(chunk);
        sparkMd5.append(blobBuffer);
        return await EsnApiUtils.retry(() => this.fmService
            .filesAddparts(formData, index + 1, chunk.size, fm.uuid)
            .toPromise(), (resp) => !!resp.content?.fileMetadata, 'sending document chunk call');
    }
    async sendCompletion(fm) {
        return await EsnApiUtils.retry(() => this.fmService
            .filesCompletion('COMPLETED', fm.checksum, fm.uuid)
            .toPromise(), (resp) => !!resp.content?.fileMetadata, 'document upload complete call');
    }
    // Upload state
    chunkUploadComplete(uploadId) {
        const upload = this.uploadItems.find((u) => u.uploadId === uploadId);
        upload.nbChunksRemaining = upload.nbChunksRemaining - 1;
        this.uploadStateService.updateUploadProgress(this.uploadItems);
    }
    async getBlobChunks(uuid) {
        console.log('getBlobChunk ' + uuid);
        const blob = await this.filesService.getBlob(uuid);
        const chunks = await EsnFileConverter.cutBlobIntoChunks(blob, this.FILE_CHUNK_MAX_SIZE);
        return chunks;
    }
    async deleteFile(uuid) {
        return lastValueFrom(this.fmService.deleteFile(uuid));
    }
    async deleteFiles(uuids) {
        return Promise.all(uuids.map(uuid => this.deleteFile(uuid)));
    }
}
EsnDocumentSenderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EsnDocumentSenderService, deps: [{ token: FILE_MANAGER_PROVIDER }, { token: ESN_FILE_CHUNK_MAX_SIZE }, { token: i1.EsnBlobRetreiverService }, { token: i2.EsnFilemanagerController }, { token: i3.EsnUploadStateService }], target: i0.ɵɵFactoryTarget.Injectable });
EsnDocumentSenderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EsnDocumentSenderService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EsnDocumentSenderService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [FILE_MANAGER_PROVIDER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ESN_FILE_CHUNK_MAX_SIZE]
                }] }, { type: i1.EsnBlobRetreiverService }, { type: i2.EsnFilemanagerController }, { type: i3.EsnUploadStateService }]; } });
//# sourceMappingURL=data:application/json;base64,