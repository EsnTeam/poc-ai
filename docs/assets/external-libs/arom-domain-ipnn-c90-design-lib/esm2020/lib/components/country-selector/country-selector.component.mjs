import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../utils/services/country/country.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../select/select/select.component";
import * as i5 from "../select/option/option.component";
import * as i6 from "../esn-flag/esn-flag.component";
import * as i7 from "../autocomplete-select/default/autocomplete-select.component";
import * as i8 from "../icon/icon.component";
export class CountrySelectorComponent {
    constructor(_countryService, cdr) {
        this._countryService = _countryService;
        this.cdr = cdr;
        this.disabled = false;
        this.autocomplete = false;
        this.hint = '';
        this.label = 'Chercher un pays';
        this.placeholder = "Chercher un pays";
        this.size = 'sm';
        this.selectionChange = new EventEmitter();
        this.queryFunc = (txt) => Promise.resolve(this._countryService.searchCountry(txt, this.highlight));
        this.optionTextFn = (country) => `${country}`;
        this.countriesList = [];
        this.onChangeSub = new Subscription();
        this.onChange = () => { };
        this.onTouch = () => { };
        this.countriesList = this._countryService.getCountriesList();
        this.control = new FormControl(null);
    }
    ngOnDestroy() {
        this.onChangeSub.unsubscribe();
    }
    writeValue(value) {
        if (!!value) {
            this.control.setValue(value);
        }
    }
    registerOnChange(fn) {
        this.onChangeSub.add(this.control.valueChanges.subscribe(fn));
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.updateDisableState();
        this.cdr.detectChanges();
    }
    updateDisableState() {
        this.disabled ? this.control.disable() : this.control.enable();
    }
    getCountryCode(country) {
        return this._countryService.getCountryCode(country);
    }
    _selectionChange(country) {
        this.selectionChange.emit(country);
    }
    ngOnChanges(changes) {
        if (changes['highlight']) {
            const filtredCountriesList = this.countriesList.filter(c => {
                if (c.toLocaleLowerCase().includes(this.highlight.toLocaleLowerCase())) {
                    this.countryToBeHighlighted = c;
                }
                return !c.toLocaleLowerCase().includes(this.highlight.toLocaleLowerCase());
            });
            if (!!this.countryToBeHighlighted) {
                this.countriesList = [this.countryToBeHighlighted, ...filtredCountriesList];
            }
        }
        if (changes['selected'] && !!this.selected) {
            this.control.setValue(this.selected);
        }
        if (changes['disabled']) {
            this.updateDisableState();
        }
    }
}
CountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CountrySelectorComponent, deps: [{ token: i1.CountryService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: CountrySelectorComponent, selector: "esn-country-selector", inputs: { highlight: "highlight", selected: "selected", disabled: "disabled", autocomplete: "autocomplete", hint: "hint", idField: "idField", label: "label", placeholder: "placeholder", size: "size" }, outputs: { selectionChange: "selectionChange" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: CountrySelectorComponent,
            multi: true,
        },
    ], usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"!autocomplete; else autocompleteTemp\">\r\n  <esn-select\r\n    class=\"country__select\"\r\n    [formControl]=\"control\"\r\n    [label]=\"label\"\r\n    [size]=\"size\"\r\n    [hint]=\"hint\"\r\n    (selectionChange)=\"_selectionChange($event)\"\r\n  >\r\n    <esn-option\r\n      *ngFor=\"let country of countriesList; let i = index\"\r\n      [value]=\"country\"\r\n      [ngClass]=\"{ country__highlight: countryToBeHighlighted && i === 0 }\"\r\n    >\r\n      <div class=\"country__container\">\r\n        <esn-flag [country]=\"country\"></esn-flag>\r\n        <span class=\"country__name\">{{ country }}</span>\r\n      </div>\r\n    </esn-option>\r\n  </esn-select>\r\n</ng-container>\r\n\r\n<ng-template #autocompleteTemp>\r\n  <esn-autocomplete-select\r\n    [queryFunc]=\"queryFunc\"\r\n    [optionTextFn]=\"optionTextFn\"\r\n    [optionTemplate]=\"overridenChipTemplate\"\r\n    [singleElemTemplate]=\"singleElemTemplate\"\r\n    [multi]=\"false\"\r\n    [idField]=\"idField\"\r\n    [label]=\"label\"\r\n    [minChars]=\"0\"\r\n    [formControl]=\"control\"\r\n    [placeholder]=\"placeholder\"\r\n    [hint]=\"hint\"\r\n  ></esn-autocomplete-select>\r\n  <ng-template\r\n    #overridenChipTemplate\r\n    let-elem\r\n    let-remove=\"remove\"\r\n    let-disabled=\"disabled\"\r\n  >\r\n    <div\r\n      class=\"country__container\"\r\n      [ngClass]=\"{\r\n        autocomplete__country__highlight:\r\n          countryToBeHighlighted && elem === highlight\r\n      }\"\r\n    >\r\n      <esn-flag [country]=\"elem\"></esn-flag>\r\n      <span class=\"country__name\">{{ elem }}</span>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template\r\n    #singleElemTemplate\r\n    let-elem\r\n    let-remove=\"remove\"\r\n    let-disabled=\"disabled\"\r\n  >\r\n    <div class=\"country__container\" *ngIf=\"elem\">\r\n      <esn-flag class=\"country__icon\" [size]=\"'xs'\" [country]=\"elem\"></esn-flag>\r\n      <span class=\"country__name\">{{ elem }}</span>\r\n      <esn-icon\r\n        *ngIf=\"!disabled\"\r\n        class=\"esn-autocomplete-select-base__close-icon country__close-icon\"\r\n        name=\"close\"\r\n        (click)=\"remove(elem)\"\r\n      ></esn-icon>\r\n    </div>\r\n  </ng-template>\r\n</ng-template>\r\n", styles: [".country__select ::ng-deep .mat-mdc-form-field{width:18rem}.country__container{display:flex}.country__container .fi{width:2rem;height:2rem}.country__container .circular{border-radius:50%}.country__name{margin:auto}.country__icon{margin:auto 0}.country__name{margin-left:.75rem;width:100%}.country__close-icon{cursor:pointer;margin:auto}::ng-deep .cdk-overlay-container::ng-deep .country__highlight{border-bottom:1px solid #CDCDCD}esn-autocomplete-select ::ng-deep ::ng-deep .mdc-evolution-chip-set .mdc-evolution-chip-set__chips{margin-left:0}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i4.EsnSelect, selector: "esn-select", inputs: ["disabled", "disableRipple", "tabIndex", "appearance", "label", "placeholder", "required", "multiple", "hint", "error", "size", "theme"], outputs: ["focus", "blur", "selectionChange", "openedChange"] }, { kind: "component", type: i5.EsnOption, selector: "esn-option", inputs: ["value", "disabled"] }, { kind: "component", type: i6.EsnFlagComponent, selector: "esn-flag", inputs: ["shape", "size", "country"] }, { kind: "component", type: i7.EsnAutocompleteSelect, selector: "esn-autocomplete-select", inputs: ["optionTextFn", "chipTextFn", "optionTemplate", "chipTemplate", "singleElemTemplate", "minChars", "hint", "noResultsLabel"] }, { kind: "component", type: i8.EsnIcon, selector: "esn-icon", inputs: ["name", "boxed", "size"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CountrySelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'esn-country-selector', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: CountrySelectorComponent,
                            multi: true,
                        },
                    ], template: "<ng-container *ngIf=\"!autocomplete; else autocompleteTemp\">\r\n  <esn-select\r\n    class=\"country__select\"\r\n    [formControl]=\"control\"\r\n    [label]=\"label\"\r\n    [size]=\"size\"\r\n    [hint]=\"hint\"\r\n    (selectionChange)=\"_selectionChange($event)\"\r\n  >\r\n    <esn-option\r\n      *ngFor=\"let country of countriesList; let i = index\"\r\n      [value]=\"country\"\r\n      [ngClass]=\"{ country__highlight: countryToBeHighlighted && i === 0 }\"\r\n    >\r\n      <div class=\"country__container\">\r\n        <esn-flag [country]=\"country\"></esn-flag>\r\n        <span class=\"country__name\">{{ country }}</span>\r\n      </div>\r\n    </esn-option>\r\n  </esn-select>\r\n</ng-container>\r\n\r\n<ng-template #autocompleteTemp>\r\n  <esn-autocomplete-select\r\n    [queryFunc]=\"queryFunc\"\r\n    [optionTextFn]=\"optionTextFn\"\r\n    [optionTemplate]=\"overridenChipTemplate\"\r\n    [singleElemTemplate]=\"singleElemTemplate\"\r\n    [multi]=\"false\"\r\n    [idField]=\"idField\"\r\n    [label]=\"label\"\r\n    [minChars]=\"0\"\r\n    [formControl]=\"control\"\r\n    [placeholder]=\"placeholder\"\r\n    [hint]=\"hint\"\r\n  ></esn-autocomplete-select>\r\n  <ng-template\r\n    #overridenChipTemplate\r\n    let-elem\r\n    let-remove=\"remove\"\r\n    let-disabled=\"disabled\"\r\n  >\r\n    <div\r\n      class=\"country__container\"\r\n      [ngClass]=\"{\r\n        autocomplete__country__highlight:\r\n          countryToBeHighlighted && elem === highlight\r\n      }\"\r\n    >\r\n      <esn-flag [country]=\"elem\"></esn-flag>\r\n      <span class=\"country__name\">{{ elem }}</span>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template\r\n    #singleElemTemplate\r\n    let-elem\r\n    let-remove=\"remove\"\r\n    let-disabled=\"disabled\"\r\n  >\r\n    <div class=\"country__container\" *ngIf=\"elem\">\r\n      <esn-flag class=\"country__icon\" [size]=\"'xs'\" [country]=\"elem\"></esn-flag>\r\n      <span class=\"country__name\">{{ elem }}</span>\r\n      <esn-icon\r\n        *ngIf=\"!disabled\"\r\n        class=\"esn-autocomplete-select-base__close-icon country__close-icon\"\r\n        name=\"close\"\r\n        (click)=\"remove(elem)\"\r\n      ></esn-icon>\r\n    </div>\r\n  </ng-template>\r\n</ng-template>\r\n", styles: [".country__select ::ng-deep .mat-mdc-form-field{width:18rem}.country__container{display:flex}.country__container .fi{width:2rem;height:2rem}.country__container .circular{border-radius:50%}.country__name{margin:auto}.country__icon{margin:auto 0}.country__name{margin-left:.75rem;width:100%}.country__close-icon{cursor:pointer;margin:auto}::ng-deep .cdk-overlay-container::ng-deep .country__highlight{border-bottom:1px solid #CDCDCD}esn-autocomplete-select ::ng-deep ::ng-deep .mdc-evolution-chip-set .mdc-evolution-chip-set__chips{margin-left:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.CountryService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { highlight: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], hint: [{
                type: Input
            }], idField: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], size: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,