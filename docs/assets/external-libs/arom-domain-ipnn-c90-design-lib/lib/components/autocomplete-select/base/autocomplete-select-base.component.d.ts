import { AfterViewInit, ElementRef, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';
import { BehaviorSubject, Subscription } from 'rxjs';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { EsnInputError, EsnInputText } from '../../input/input';
import * as i0 from "@angular/core";
export declare class EsnAutocompleteSelectBase<T> implements OnInit, OnChanges, ControlValueAccessor, AfterViewInit {
    private _injector;
    elementRef: ElementRef;
    queryFunc: (txt: string) => Promise<T[] | null>;
    idField: keyof T;
    multi?: boolean | string;
    label: string;
    hint: string;
    optionTemplate?: TemplateRef<any>;
    chipTemplate?: TemplateRef<any>;
    singleElemTemplate?: TemplateRef<any>;
    disabled: boolean | string;
    optionFilterFunc: (elm: T) => boolean;
    error?: EsnInputError;
    minChars: number;
    noResultsLabel: string;
    inputted: FormControl;
    readonly separatorKeysCodes: readonly [13, 188];
    input: EsnInputText;
    chipInput: ElementRef<HTMLInputElement>;
    autocompleteChoices: BehaviorSubject<T[]>;
    addChipStream$: BehaviorSubject<T | null>;
    selectedElems: T[];
    onChangeSub: Subscription;
    isMulti: boolean;
    noResults: boolean;
    searchingResults: boolean;
    isSearchInError: boolean;
    removeFn: Function;
    onChange: any;
    onTouch: any;
    previousInputValue: string;
    nextInputValue: string;
    parentControl: NgControl;
    constructor(_injector: Injector, elementRef: ElementRef);
    ngOnInit(): Promise<void>;
    searchResults(txt: string): Promise<void>;
    onFocus(): void;
    ngAfterViewInit(): void;
    removeLastChipOnBackspace: (e: any) => void;
    ngOnChanges(changes: SimpleChanges): void;
    handleSearchResponse(queryResults: T[] | null): void;
    updateInputDisabled(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(onTouched: Function): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    remove(elem: T): void;
    selected(event: MatAutocompleteSelectedEvent): void;
    onChangeWrapper(value: T[]): void;
    assignErrors(): void;
    onInputBlur(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EsnAutocompleteSelectBase<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EsnAutocompleteSelectBase<any>, "esn-autocomplete-select-base", never, { "queryFunc": "queryFunc"; "idField": "idField"; "multi": "multi"; "label": "label"; "hint": "hint"; "optionTemplate": "optionTemplate"; "chipTemplate": "chipTemplate"; "singleElemTemplate": "singleElemTemplate"; "disabled": "disabled"; "optionFilterFunc": "optionFilterFunc"; "error": "error"; "minChars": "minChars"; "noResultsLabel": "noResultsLabel"; }, {}, never, never, false, never>;
}
export declare class EsnAutocompleteSelectImplementationBase<T> implements ControlValueAccessor, OnInit, OnDestroy, AfterViewInit {
    private _injector;
    queryFunc: (txt: string) => Promise<T[] | null>;
    idField: keyof T;
    multi?: boolean | string;
    disabled: boolean | string;
    optionFilterFunc: (elm: T) => boolean;
    label: string;
    placeholder: string;
    error?: EsnInputError;
    onChange: any;
    onTouch: any;
    control: FormControl;
    onChangeSub: Subscription;
    parentControl: NgControl;
    constructor(_injector: Injector);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(onTouched: Function): void;
    setDisabledState(isDisabled: boolean): void;
    updateDisableState(): void;
    ngOnDestroy(): void;
    assignErrors(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EsnAutocompleteSelectImplementationBase<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EsnAutocompleteSelectImplementationBase<any>, "esn-autocomplete-impl-base", never, { "queryFunc": "queryFunc"; "idField": "idField"; "multi": "multi"; "disabled": "disabled"; "optionFilterFunc": "optionFilterFunc"; "label": "label"; "placeholder": "placeholder"; "error": "error"; }, {}, never, never, false, never>;
}
