import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BlobItem, CustomFileMetadataDto, DocumentEventEmitter, DocumentItem, FileMetadataDto } from '../../utils/model/documents';
import { EsnDocumentRetrievalService } from './document-retrieval.service';
import { EsnFileInputNotificationService } from './file-input-notification.service';
import { FileSizePipe } from './file-size.pipe';
import { EsnFileInputConfig } from './fileInputConfig';
import * as i0 from "@angular/core";
export declare class EsnFileInput implements ControlValueAccessor {
    docRetrievalService: EsnDocumentRetrievalService;
    notificationService: EsnFileInputNotificationService;
    fileSizePipe: FileSizePipe;
    elementRef: ElementRef;
    config: EsnFileInputConfig;
    PROVIDER?: any;
    selectorNumber: string;
    maxSize?: number;
    maxCount?: number;
    acceptedTypes?: string[];
    cardMode: boolean;
    selectorText?: string;
    multi: boolean;
    processAddedBlobs: (blobItems: BlobItem[], fileMetadata: FileMetadataDto[]) => Promise<boolean>;
    processDeletedDoc: (deletedDoc: CustomFileMetadataDto) => Promise<boolean>;
    documentDelete: EventEmitter<CustomFileMetadataDto>;
    documentsAdd: EventEmitter<CustomFileMetadataDto[]>;
    onTouch: any;
    onChange: any;
    _documents: DocumentItem[];
    documents: FileMetadataDto[] | FileMetadataDto | null;
    constructor(docRetrievalService: EsnDocumentRetrievalService, notificationService: EsnFileInputNotificationService, fileSizePipe: FileSizePipe, elementRef: ElementRef, config: EsnFileInputConfig, PROVIDER?: any);
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onDocumentsAdd(docs: CustomFileMetadataDto[]): Promise<void>;
    onDocumentsDelete(deletedDoc: FileMetadataDto): Promise<void>;
    get _maxSize(): number;
    get _maxCount(): number;
    readOnly: boolean;
    set disabled(value: boolean);
    _loading: boolean;
    set loading(value: boolean);
    onDocumentEvent(e: DocumentEventEmitter): void;
    onFilesAdd(files: File[]): Promise<void>;
    get acceptedFileTypesLabel(): string;
    _updateConvertedDocs(): void;
    _updateActionsPermissions(): void;
    handleDocumentDownload(e: DocumentEventEmitter): void;
    getAcceptedFileTypes(): string[];
    get acceptedFileTypes(): string;
    checkFileType(file: File): boolean;
    _checkAcceptedTypesValidity(): void;
    convertToFileArray(files: File[]): File[];
    getDocsValAsList(): FileMetadataDto[];
    addDocsToValue(docs: FileMetadataDto[]): void;
    removeDocFromValue(doc: FileMetadataDto): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EsnFileInput, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EsnFileInput, "esn-file-input", never, { "maxSize": "maxSize"; "maxCount": "maxCount"; "acceptedTypes": "acceptedTypes"; "cardMode": "cardMode"; "selectorText": "selectorText"; "multi": "multi"; "processAddedBlobs": "processAddedBlobs"; "processDeletedDoc": "processDeletedDoc"; "disabled": "disabled"; "loading": "loading"; }, { "documentDelete": "documentDelete"; "documentsAdd": "documentsAdd"; }, never, ["*"], false, never>;
}
